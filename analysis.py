import os
import pefile
import hashlib
import requests
import subprocess
import re
from docx import Document
from docx.shared import RGBColor
import time  # Import time module for adding delay

# Define a list of common Windows API function names
common_api_functions = [
    "CreateFile", "ReadFile", "WriteFile", "CloseHandle", 
    "LoadLibrary", "GetProcAddress", "CreateProcess", 
    "CreateThread", "VirtualAlloc", "VirtualProtect"
]

def calculate_hashes(file_path):
    with open(file_path, "rb") as f:
        data = f.read()
        md5_hash = hashlib.md5(data).hexdigest()
        sha1_hash = hashlib.sha1(data).hexdigest()
        sha256_hash = hashlib.sha256(data).hexdigest()
    return md5_hash, sha1_hash, sha256_hash

def read_api_key(api_file):
    try:
        with open(api_file, 'r') as f:
            api_key = f.read().strip()
        return api_key
    except Exception as e:
        print(f"Error reading API key: {str(e)}")
        return None

def extract_strings(file_path):
    try:
        output = subprocess.check_output(['strings', '-n', '8', file_path], universal_newlines=True)
        useful_strings = [line.strip() for line in output.splitlines() if len(line.strip()) > 5]  # Filter strings with length > 5
        useful_api_strings = [string for string in useful_strings if any(api_func in string for api_func in common_api_functions)]
        
        # Extract URLs
        urls = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', output)
        
        # Extract file paths
        file_paths = re.findall(r'[A-Za-z]:\\(?:[^\\/:*?"<>|\r\n]+\\)*[^\\/:*?"<>|\r\n]*', output)
        
        # Additional paths like %SYSTEMROOT%\system32\, k:%s h:%s p:%s per:%s
        additional_paths = re.findall(r'%\w+%\\(?:[^\\/:*?"<>|\r\n]+\\)*[^\\/:*?"<>|\r\n]*', output)
        additional_paths += re.findall(r'[a-zA-Z]:\\(?:[^\\/:*?"<>|\r\n]+\\)*[^\\/:*?"<>|\r\n]*', output)
        
        return useful_api_strings + urls + file_paths + additional_paths
    except Exception as e:
        print(f"Error extracting strings: {str(e)}")
        return []

def submit_to_virustotal(file_path, api_key):
    try:
        url = 'https://www.virustotal.com/vtapi/v2/file/scan'
        files = {'file': (file_path, open(file_path, 'rb'))}
        params = {'apikey': api_key}
        response = requests.post(url, files=files, params=params)
        return response.json()
    except Exception as e:
        return {'error': str(e)}

def get_detection_details(api_key, resource):
    try:
        if resource:
            url = 'https://www.virustotal.com/vtapi/v2/file/report'
            params = {'apikey': api_key, 'resource': resource}
            response = requests.get(url, params=params)
            data = response.json()
            if 'positives' in data and 'total' in data:
                security_vendors_flagged = data['positives']
                total_vendors = data['total']
                sandbox_flags = 1 if 'sandbox' in data else 0
                return security_vendors_flagged, total_vendors, sandbox_flags
        return 0, 0, 0
    except Exception as e:
        print(f"Error retrieving detection details: {str(e)}")
        return 0, 0, 0

def add_heading1(document, text):
    document.add_heading(text, level=1)

def add_paragraph(document, text, is_malicious=False):
    paragraph = document.add_paragraph()
    run = paragraph.add_run(text)
    if is_malicious:
        font = run.font
        font.color.rgb = RGBColor(255, 0, 0)  # Red color for malicious text
    else:
        font = run.font
        font.color.rgb = RGBColor(0, 0, 0)

def add_details_to_word(file_path, api_key, project_name, members):
    document = Document()
    
    # Add project name and members at the top
    add_heading1(document, project_name)
    add_heading1(document, "Members:")
    for member in members:
        add_paragraph(document, member)
    
    add_heading1(document, "Static Analysis Report")  

    try:
        response = submit_to_virustotal(file_path, api_key)
        resource = response.get('resource')
        security_vendors_flagged, total_vendors, sandbox_flags = get_detection_details(api_key, resource)

        # Malicious or Not
        if security_vendors_flagged > 0:  # If flagged by any vendor
            add_heading1(document, "Malicious or Not:")  
            add_paragraph(document, "Malicious: This file is flagged by antivirus engines of virustotal as malicious.", is_malicious=True)
        else:
            add_heading1(document, "Malicious or Not:")  
            add_paragraph(document, "Not Malicious: This file is not flagged by antivirus engines as malicious.", is_malicious=False)

        pe = pefile.PE(file_path)
        add_heading1(document, "File Information")  
        add_paragraph(document, f"File Name: {file_path}")
        add_paragraph(document, f"File Size: {len(pe.__data__)} bytes")
        add_paragraph(document, f"File Type: {pe.FILE_HEADER.Machine}")

        # Hashes
        md5_hash, sha1_hash, sha256_hash = calculate_hashes(file_path)
        add_heading1(document, "Hashes")  
        add_paragraph(document, f"MD5 Hash: {md5_hash}")
        add_paragraph(document, f"SHA1 Hash: {sha1_hash}")
        add_paragraph(document, f"SHA256 Hash: {sha256_hash}")
        
        # Imported DLL files
        add_heading1(document, "Imported DLL Files")  
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            add_paragraph(document, entry.dll.decode('utf-8'))

        # Submit file to VirusTotal for analysis
        if 'error' in response:
            add_paragraph(document, f"Error submitting file to VirusTotal: {response['error']}")
            return

        # Add VirusTotal report link
        if resource:
            vt_report_url = f"https://www.virustotal.com/gui/file/{resource}/detection"
            add_heading1(document, "VirusTotal Report")
            add_paragraph(document, f"VirusTotal Report: {vt_report_url}")

        # Extract useful strings, URLs, and file paths
        add_heading1(document, "Useful Strings")  
        useful_strings = extract_strings(file_path)
        for string in useful_strings:
            add_paragraph(document, string)
        
        # Vendor Detection
        add_heading1(document, "Vendor Detection")  
        add_paragraph(document, f"{security_vendors_flagged}/{total_vendors} security vendors flagged this file as malicious.")
        
        document.save("Static_Analysis_Report.docx")
        print("\nStatic Analysis report has been saved to -> Static_Analysis_Report.docx\n")

    except Exception as e:
        print("Error analyzing file:", str(e))

def analyze_file(file_path, api_key):
    print("\nLoading...")  # Display loading message
    
    # Simulate some processing time
    time.sleep(2)
    
    try:
        response = submit_to_virustotal(file_path, api_key)
        print("responce",response)
        resource = response.get('resource')
        security_vendors_flagged, total_vendors, sandbox_flags = get_detection_details(api_key, resource)

        # Malicious or Not
        if security_vendors_flagged > 0:  # If flagged by any vendor
            print("\nMalicious: This file is flagged by antivirus engines of virustotal as malicious.")
        else:
            print("Not Malicious: This file is not flagged by antivirus engines as malicious.")

        # Hashes
        md5_hash, sha1_hash, sha256_hash = calculate_hashes(file_path)
        print("\nHashes:")
        print(f"\tMD5 Hash: {md5_hash}")
        print(f"\tSHA1 Hash: {sha1_hash}")
        print(f"\tSHA256 Hash: {sha256_hash}")

        # DLL Files
        pe = pefile.PE(file_path)
        print("\nImported DLL files:")
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            print("\t" + f"{ entry.dll.decode('utf-8')}")

    except Exception as e:
        print(f"Error analyzing file: {str(e)}")

if __name__ == "__main__":
    file_path = r'D:\University\6-Semester\VARE\Linux\VARE\Creakme\Malware\Assignmen_5.exe'
    api_file = 'api.txt'
    project_name = "VARE Project"
    members = [  
        "Abdul Malik     (2130-0119)\nHassan Mehmood  (2130-0061)"
    ]
    if os.path.isfile(api_file):
        api_key = read_api_key(api_file)
        if api_key:
            analyze_file(file_path, api_key)
            add_details_to_word(file_path, api_key, project_name, members)
        else:
            print("API key not found in api.txt")
    else:
        print("api.txt file not found")
